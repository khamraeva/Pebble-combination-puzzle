function findCombination(multipliedSum = 24, totalSum = 22) {
  const options = Array.from(Array(10).keys());
  const result = [];
  
  options.forEach(firstNumber => {
    const combination = [];
    
    options.forEach(secondNumber => {
      if (firstNumber * secondNumber === multipliedSum && !(secondNumber % 2)) {
        const fourthNumber = secondNumber/2;
        
        options.forEach(thirdNumber => {
          options.forEach(fifthNumber => {
            if (firstNumber + secondNumber + thirdNumber + fourthNumber + fifthNumber === totalSum
              && firstNumber + thirdNumber === fourthNumber + fifthNumber) {
              combination.push(firstNumber, secondNumber, thirdNumber, fourthNumber, fifthNumber);
            }
          });
        });
        
      }
    });
    combination.length && result.push(combination);
  });
  return result;
}

findCombination();

///////////////////////////////////////////////

const options = Array.from(Array(10).keys());

function findCombination(multipliedSum = 24, totalSum = 22) {
  const countMulti = findMultiple(options, multipliedSum);
  const countThird = findFourth(countMulti);
  const allCombinations = countAll(countThird, totalSum);
  return notUnique(allCombinations)
}

function findMultiple(options, multipliedSum) {
  const res = [];
  options.forEach(first => {
    options.forEach(second => {
      if(first * second === multipliedSum && !(second % 2)) {
        res.push({first, second});
      };
    })
  });
  return res;
}
                  
function findFourth(array) {
  return array.map(item => Object.assign({...item, fourth: item.second/2}));
};

function countAll(array, total) {
  const result = [];
  array.forEach(item => {
    const { first, second, fourth } = item;
    options.forEach(third => {
      options.forEach(fifth => {
        const combination = [first, second, third, fourth, fifth];
        if (first + third === fourth + fifth 
        && countTotal(combination, total)) {
          result.push(combination);
        } 
      });
    });
  });
  return result;
}

function countTotal(array, toEqual) {
  const sum = array.reduce((acc, item) => acc + item);
  return sum === toEqual;
}

function notUnique(arr) {
  return arr.filter(array => new Set(array).size !== array.length);
}

findCombination();
